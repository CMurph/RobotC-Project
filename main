#pragma config(Sensor, S1,     sonicSensor,    sensorSONAR)
#pragma config(Sensor, S2,     soundSensor,    sensorSoundDB)
#pragma config(Sensor, S3,     lightSensor,    sensorLightActive)
#pragma config(Sensor, S4,     touchSensor,    sensorTouch)

void turn_right();
void turn_left();
int forward();
void sweep();


int direction = 1;
/*
direction = 0 when robot facing up
direction = 1 when robot facing right
direction = 2 when robot facing down
direction = 3 when robot facing left
*/
int threshold = 59; //value for black on light sensor
int row=4; //row value for robot
int col=1; //col value for robot
int block1row=0; 
int block1col=0; 
int block2row=0; 
int block2col=0;
int blockcount=0; 



task main()
{
	nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

while(blockcount < 2 ) //until both blocks found
{
	sweep(); //check right
	turn_left();
	wait10Msec(10);
	sweep(); //check up
	turn_right();
	turn_right();
	wait10Msec(10);
	sweep();
	turn_left(); //check down
	forward();
}
while(SensorValue(touchSensor)==0)
	{
	nxtDisplayTextLine(1, "Finished");
	}
	wait1Msec(3000);




}//end main()






void turn_left()
{

//set Values to zero
 	nMotorEncoder[motorB] = 0;
 	nMotorEncoder[motorC] = 0;

	//set the turn
 	nMotorEncoderTarget[motorB] = 181;
 	nMotorEncoderTarget[motorC] = 181;

 	//set speed
 	motor[motorB] = 25;
 	motor[motorC] = -25;


	//infinite loop until the condition satisfied
	while(nMotorRunState[motorC] != runStateIdle)
		{
			}

//calculating direction
direction =direction-1;
if (direction== -1) //required as RobotC can not get the mod of negative numbers
{
	direction = 3;
}
direction =(direction % 4);

}//end turn_left()



void turn_right()
{
	//set Valus to zero
 	nMotorEncoder[motorB] = 0;
 	nMotorEncoder[motorC] = 0;

	//set the turn
 	nMotorEncoderTarget[motorB] = 181;
 	nMotorEncoderTarget[motorC] = 181;

 	//set speed
 	motor[motorB] = - 25;
 	motor[motorC] = 25;


	//infinite loop until the condition satisfied
	while(nMotorRunState[motorC] != runStateIdle)
		{
			}

 //Stop NXT
  motor[motorB] = 0;
	motor[motorC] = 0;

//calculating direction
direction= direction +1;
if (direction== -1) //required as RobotC can not get the mod of negative numbers
{
	direction = 3;
}
direction= (direction %4);
}//end turn_right()




int forward()
{
	//postions robot cannot go forward
	if(direction==0 && row==7)
	{
		turn_left();
		return 0;
	}
	if(direction==1 && col==9)
	{
		turn_left();
		return 0;
	}
	if(direction==2 && row==1)
	{
		turn_left();
		return 0;
	}
	if(direction==3 && col==1)
	{
		turn_left();
		return 0;
	}

	nMotorEncoder[motorB]=0;
	nMotorEncoder[motorC]=0;

	//go forward small amount to test for black
	nMotorEncoderTarget[motorB]=80;
	nMotorEncoderTarget[motorC]=80;

	motor[motorB]= 40;
	motor[motorC]= 40;

	while(nMotorRunState[motorB] != runStateIdle)
	{
	}
	motor[motorB]= 0;
	motor[motorC]= 0;
	wait1Msec(300);

	//if black detected return to postion
	if (SensorValue(lightSensor) < threshold)
	{
			//turn 180
			turn_right();
			turn_right();

			nMotorEncoderTarget[motorB]=80;
			nMotorEncoderTarget[motorC]=80;

			motor[motorB]= 40;
			motor[motorC]= 40;


			//stop when reach distance
			while(nMotorRunState[motorB] != runStateIdle)
			{
			}
			motor[motorB]= 0;
			motor[motorC]= 0;
			wait1Msec(300);

			//go down
			turn_left();
			


	}//end of if


	else //if no black box detected
	{

			//remaining distance of one square
		nMotorEncoderTarget[motorB]=200;
		nMotorEncoderTarget[motorC]=200;

		motor[motorB]= 40;
		motor[motorC]= 40;


		while(nMotorRunState[motorB] != runStateIdle)
		{
		}
		motor[motorB]= 0;
		motor[motorC]= 0;
		wait1Msec(300);

		//calculation postion in grid
		if(direction==0) //if facing up
		{
			row=row+1;
		}

		if(direction==1)//if facing right
		{
			col=col+1;
		}

				if(direction==2)//if facing down
		{
			row=row-1;
		}

				if(direction==3) //if facing left
		{
			col=col-1;
		}
	}//end of else

	return 0;
}//end of forward()


void sweep()
{
	int limit;
	limit=0;
	float calc;
	int calcRow; //calculated row value
	int calcCol;//calculated col value
	
	//setting limits for the sensor
	if (direction==0)//if facing up
	{
		limit=7-row; //get limit for sensor value
	}
	
			if (direction==1)//if facing right
	{
		limit=3; //smaller value as calc value would be too large
	}
	
		if (direction==2)//if facing down
	{
		limit=row+1; //get limit for sensor value
	}
	
	//adding block distance to limit
	limit=(limit*14);
	
	if (SensorValue(sonicSensor)<limit) //if in grid
	{
		calc=SensorValue(sonicSensor);
		calc=calc/14; //find number of boxes away
		calc=calc+.5; //rounding value for when converting to int
		
		if (direction==0)//facing up
		{
			calc=calc+row;
			calcRow=calc;
			calcCol=col;
		}
				if (direction==1)//facin right
		{
			calc=calc+col;
			calcRow=row;
			calcCol=calc;
		}
		
		if (direction==2)//facing down
		{
			calc=(calc-row)+1;
			calcRow=calc;
			calcCol=col;
		}
		


		
		if(blockcount==0)
		{
			block1row=calcRow;
			block1col=calcCol;
		}//end if
		
				if(blockcount==1)
		{
			block2row=calcRow;
			block2col=calcCol;
		}//end if
		blockcount++;
	}//end if
	nxtDisplayTextLine(3, "b1 row %d col %d", block1row, block1col);
	nxtDisplayTextLine(4, "b2 row %d col %d", block2row, block2col);



}//end of sweep()
